import React, { useState } from 'react';
import Head from 'next/head';
import '@fortawesome/fontawesome-free/css/all.min.css';

// Tipos
interface Child {
  id: string;
  name: string;
  birthDate: Date;
  fatherName: string;
  fatherPhone: string;
  fatherIsMember: boolean;
  motherName: string;
  motherPhone: string;
  motherIsMember: boolean;
  address: string;
  specialCare: string;
  additionalResponsible: string;
  additionalResponsiblePhone: string;
  occurrences: Occurrence[];
}

interface Occurrence {
  id: string;
  date: Date;
  description: string;
}

interface FormData {
  id: string;
  name: string;
  birthDate: string;
  fatherName: string;
  fatherPhone: string;
  fatherIsMember: boolean;
  motherName: string;
  motherPhone: string;
  motherIsMember: boolean;
  additionalResponsible: string;
  additionalResponsiblePhone: string;
  address: string;
  specialCare: string;
  occurrences: Occurrence[];
}

interface ClassInfo {
  ageRange: string;
}

interface CheckedInChildren {
  [className: string]: Child[];
}

export default function Home() {
  const [children, setChildren] = useState<Child[]>([
    { 
      id: '1', 
      name: 'Ana Silva', 
      birthDate: new Date('2020-05-15'), 
      fatherName: 'Carlos Silva', 
      fatherPhone: '(11) 98765-4321', 
      fatherIsMember: true, 
      motherName: 'Maria Silva', 
      motherPhone: '(11) 91234-5678', 
      motherIsMember: true, 
      address: 'Rua das Flores, 123', 
      specialCare: 'Alergia a amendoim', 
      additionalResponsible: '', 
      additionalResponsiblePhone: '',
      occurrences: [
        { id: '101', date: new Date('2023-10-15T10:30:00'), description: 'Chorou durante toda a aula' },
        { id: '102', date: new Date('2023-11-05T09:45:00'), description: 'Não quis participar das atividades' }
      ]
    },
    { 
      id: '2', 
      name: 'Pedro Santos', 
      birthDate: new Date('2022-02-10'), 
      fatherName: 'João Santos', 
      fatherPhone: '(11) 97654-3210', 
      fatherIsMember: false, 
      motherName: 'Carla Santos', 
      motherPhone: '(11) 92345-6789', 
      motherIsMember: false, 
      address: 'Av. Principal, 456', 
      specialCare: '', 
      additionalResponsible: '', 
      additionalResponsiblePhone: '',
      occurrences: []
    },
    { 
      id: '3', 
      name: 'Beatriz Oliveira', 
      birthDate: new Date('2019-11-20'), 
      fatherName: 'Roberto Oliveira', 
      fatherPhone: '(11) 96543-2109', 
      fatherIsMember: true, 
      motherName: 'Juliana Oliveira', 
      motherPhone: '(11) 93456-7890', 
      motherIsMember: false, 
      address: 'Rua dos Pássaros, 789', 
      specialCare: 'Intolerância à lactose', 
      additionalResponsible: '', 
      additionalResponsiblePhone: '',
      occurrences: [
        { id: '103', date: new Date('2023-12-10T11:15:00'), description: 'Mordeu outra criança' }
      ]
    },
    { 
      id: '4', 
      name: 'Lucas Ferreira', 
      birthDate: new Date('2021-08-05'), 
      fatherName: 'Marcos Ferreira', 
      fatherPhone: '(11) 95432-1098', 
      fatherIsMember: false, 
      motherName: 'Patrícia Ferreira', 
      motherPhone: '(11) 94567-8901', 
      motherIsMember: true, 
      address: 'Alameda das Árvores, 321', 
      specialCare: '', 
      additionalResponsible: '', 
      additionalResponsiblePhone: '',
      occurrences: []
    },
    { 
      id: '5', 
      name: 'Sofia Costa', 
      birthDate: new Date('2023-01-25'), 
      fatherName: 'Eduardo Costa', 
      fatherPhone: '(11) 94321-0987', 
      fatherIsMember: false, 
      motherName: 'Fernanda Costa', 
      motherPhone: '(11) 95678-9012', 
      motherIsMember: false, 
      address: 'Rua do Comércio, 654', 
      specialCare: '', 
      additionalResponsible: 'Avó Maria', 
      additionalResponsiblePhone: '(11) 98888-7777',
      occurrences: []
    }
  ]);
  
  const [searchTerm, setSearchTerm] = useState('');
  const [formData, setFormData] = useState<FormData>({
    id: '',
    name: '',
    birthDate: '',
    fatherName: '',
    fatherPhone: '',
    fatherIsMember: false,
    motherName: '',
    motherPhone: '',
    motherIsMember: false,
    additionalResponsible: '',
    additionalResponsiblePhone: '',
    address: '',
    specialCare: '',
    occurrences: []
  });
  
  const [checkedInChildren, setCheckedInChildren] = useState<CheckedInChildren>({
    'Berçário I': [],
    'Berçário II': [],
    'Crianças': []
  });
  
  // Estado para controlar a navegação entre páginas
  const [currentPage, setCurrentPage] = useState('home');
  const [selectedClass, setSelectedClass] = useState<string | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('info');
  
  // Informações das classes
  const classesInfo: Record<string, ClassInfo> = {
    'Berçário I': { ageRange: '0 à 1 ano' },
    'Berçário II': { ageRange: '2 à 3 anos' },
    'Crianças': { ageRange: '4 à 6 anos' }
  };
  
  // Função para calcular a idade em anos
  const calculateAge = (birthDate: Date): number => {
    const today = new Date();
    const age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      return age - 1;
    }
    
    return age;
  };
  
  // Função para determinar a classe com base na idade
  const getClassByAge = (age: number): string => {
    if (age <= 1) return 'Berçário I';
    if (age <= 3) return 'Berçário II';
    return 'Crianças';
  };
  
  // Função para verificar se a criança é visitante (nem pai nem mãe são membros)
  const isVisitor = (child: Child): boolean => {
    return !child.fatherIsMember && !child.motherIsMember;
  };
  
  // Função para fazer check-in de uma criança
  const handleCheckIn = (child: Child) => {
    const age = calculateAge(child.birthDate);
    const className = getClassByAge(age);
    
    // Verificar se a criança já está em check-in
    const isAlreadyCheckedIn = Object.values(checkedInChildren).some(
      classChildren => classChildren.some(c => c.id === child.id)
    );
    
    if (isAlreadyCheckedIn) {
      alert(`${child.name} já está em check-in!`);
      return;
    }
    
    setCheckedInChildren(prev => ({
      ...prev,
      [className]: [...prev[className], child]
    }));

    // Remover da listagem principal
    setChildren(prev => prev.filter(c => c.id !== child.id));

    alert(`Check-in de ${child.name} realizado com sucesso na classe ${className}!`);
  };
  
  // Função para fazer check-out de uma criança
  const handleCheckOut = (child: Child, className: string) => {
    // Adicionar de volta à listagem principal
    setChildren(prev => [...prev, child]);
    
    // Remover da classe
    setCheckedInChildren(prev => ({
      ...prev,
      [className]: prev[className].filter(c => c.id !== child.id)
    }));
    
    alert(`Check-out de ${child.name} realizado com sucesso!`);
  };
  
  // Função para editar uma criança
  const handleEditChild = (child: Child) => {
    // Formatar a data para o formato esperado pelo input date (YYYY-MM-DD)
    const formattedDate = child.birthDate.toISOString().split('T')[0];
    
    setFormData({
      id: child.id,
      name: child.name,
      birthDate: formattedDate,
      fatherName: child.fatherName,
      fatherPhone: child.fatherPhone,
      fatherIsMember: child.fatherIsMember,
      motherName: child.motherName,
      motherPhone: child.motherPhone,
      motherIsMember: child.motherIsMember,
      additionalResponsible: child.additionalResponsible || '',
      additionalResponsiblePhone: child.additionalResponsiblePhone || '',
      address: child.address,
      specialCare: child.specialCare || '',
      occurrences: child.occurrences || []
    });
    
    setIsEditing(true);
    setActiveTab('info');
    setCurrentPage('register');
  };
  
  // Função para lidar com o envio do formulário
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isEditing) {
      // Atualizar criança existente
      const updatedChild: Child = {
        id: formData.id,
        name: formData.name,
        birthDate: new Date(formData.birthDate),
        fatherName: formData.fatherName,
        fatherPhone: formData.fatherPhone,
        fatherIsMember: formData.fatherIsMember,
        motherName: formData.motherName,
        motherPhone: formData.motherPhone,
        motherIsMember: formData.motherIsMember,
        additionalResponsible: formData.additionalResponsible,
        additionalResponsiblePhone: formData.additionalResponsiblePhone,
        address: formData.address,
        specialCare: formData.specialCare,
        occurrences: formData.occurrences
      };
      
      // Verificar se a criança está na lista principal ou em check-in
      const isInMainList = children.some(child => child.id === formData.id);
      
      if (isInMainList) {
        // Atualizar na lista principal
        setChildren(prev => prev.map(child => 
          child.id === formData.id ? updatedChild : child
        ));
      } else {
        // Atualizar na lista de check-in
        for (const className in checkedInChildren) {
          if (checkedInChildren[className].some(child => child.id === formData.id)) {
            setCheckedInChildren(prev => ({
              ...prev,
              [className]: prev[className].map(child => 
                child.id === formData.id ? updatedChild : child
              )
            }));
            break;
          }
        }
      }
      
      alert(`Dados de ${updatedChild.name} atualizados com sucesso!`);
    } else {
      // Cadastrar nova criança
      const newChild: Child = {
        id: Date.now().toString(),
        name: formData.name,
        birthDate: new Date(formData.birthDate),
        fatherName: formData.fatherName,
        fatherPhone: formData.fatherPhone,
        fatherIsMember: formData.fatherIsMember,
        motherName: formData.motherName,
        motherPhone: formData.motherPhone,
        motherIsMember: formData.motherIsMember,
        additionalResponsible: formData.additionalResponsible,
        additionalResponsiblePhone: formData.additionalResponsiblePhone,
        address: formData.address,
        specialCare: formData.specialCare,
        occurrences: []
      };
      
      setChildren([...children, newChild]);
      alert(`Criança ${newChild.name} cadastrada com sucesso!`);
    }
    
    // Resetar o formulário
    setFormData({
      id: '',
      name: '',
      birthDate: '',
      fatherName: '',
      fatherPhone: '',
      fatherIsMember: false,
      motherName: '',
      motherPhone: '',
      motherIsMember: false,
      additionalResponsible: '',
      additionalResponsiblePhone: '',
      address: '',
      specialCare: '',
      occurrences: []
    });
    
    setIsEditing(false);
    setCurrentPage('home');
  };
  
  // Filtrar crianças com base no termo de pesquisa
  const filteredChildren = children.filter(child =>
    child.name.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  // Função para navegar para a página de classe
  const navigateToClass = (className: string) => {
    setSelectedClass(className);
    setCurrentPage('class');
  };
  
  // Função para navegar para a página de cadastro
  const navigateToRegister = () => {
    setIsEditing(false);
    setFormData({
      id: '',
      name: '',
      birthDate: '',
      fatherName: '',
      fatherPhone: '',
      fatherIsMember: false,
      motherName: '',
      motherPhone: '',
      motherIsMember: false,
      additionalResponsible: '',
      additionalResponsiblePhone: '',
      address: '',
      specialCare: '',
      occurrences: []
    });
    setCurrentPage('register');
  };
  
  // Função para formatar data e hora
  const formatDateTime = (date: Date) => {
    return new Intl.DateTimeFormat('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };
  
  // Componente ClassCard
  const ClassCard = ({ title, ageRange, children }: { title: string; ageRange: string; children: Child[] }) => (
    <div 
      className="bg-white rounded-lg shadow-lg p-6 h-full cursor-pointer hover:bg-blue-50 transition-colors"
      onClick={() => navigateToClass(title)}
    >
      <h2 className="text-xl font-semibold mb-2">{title}</h2>
      <p className="text-gray-600 mb-4">Faixa etária: {ageRange}</p>
      <div className="mt-4">
        <p className="text-sm font-medium text-gray-700 mb-2">
          Crianças presentes: {children.length}
        </p>
      </div>
      {children.length > 0 && (
        <div className="mt-2 text-blue-600 text-sm font-medium flex items-center">
          <span>Ver lista</span>
          <i className="fas fa-chevron-right ml-1 text-xs"></i>
        </div>
      )}
    </div>
  );
  
  // Componente de Abas para o formulário
  const FormTabs = () => (
    <div className="mb-6 border-b border-gray-200">
      <nav className="-mb-px flex space-x-8">
        <button
          type="button"
          className={`py-4 px-1 border-b-2 font-medium text-sm ${
            activeTab === 'info'
              ? 'border-blue-500 text-blue-600'
              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
          }`}
          onClick={() => setActiveTab('info')}
        >
          Informações Pessoais
        </button>
        {isEditing && (
          <button
            type="button"
            className={`py-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'occurrences'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
            onClick={() => setActiveTab('occurrences')}
          >
            Ocorrências
          </button>
        )}
      </nav>
    </div>
  );
  
  // Componente de Informações Pessoais
  const PersonalInfoTab = () => (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div>
        <label className="block text-sm font-medium text-gray-700">Nome</label>
        <input
          type="text"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.name}
          onChange={(e) => setFormData({...formData, name: e.target.value})}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Data de Nascimento</label>
        <input
          type="date"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.birthDate}
          onChange={(e) => setFormData({...formData, birthDate: e.target.value})}
          required
        />
      </div>

      <div className="flex flex-col">
        <div className="flex justify-between items-center">
          <label className="block text-sm font-medium text-gray-700">Nome do Pai</label>
          <label className="flex items-center">
            <input
              type="checkbox"
              className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              checked={formData.fatherIsMember}
              onChange={(e) => setFormData({...formData, fatherIsMember: e.target.checked})}
            />
            <span className="ml-2 text-sm text-gray-600">Membro</span>
          </label>
        </div>
        <input
          type="text"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.fatherName}
          onChange={(e) => setFormData({...formData, fatherName: e.target.value})}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Telefone do Pai</label>
        <input
          type="tel"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.fatherPhone}
          onChange={(e) => setFormData({...formData, fatherPhone: e.target.value})}
          required
        />
      </div>

      <div className="flex flex-col">
        <div className="flex justify-between items-center">
          <label className="block text-sm font-medium text-gray-700">Nome da Mãe</label>
          <label className="flex items-center">
            <input
              type="checkbox"
              className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              checked={formData.motherIsMember}
              onChange={(e) => setFormData({...formData, motherIsMember: e.target.checked})}
            />
            <span className="ml-2 text-sm text-gray-600">Membro</span>
          </label>
        </div>
        <input
          type="text"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.motherName}
          onChange={(e) => setFormData({...formData, motherName: e.target.value})}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Telefone da Mãe</label>
        <input
          type="tel"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.motherPhone}
          onChange={(e) => setFormData({...formData, motherPhone: e.target.value})}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Responsável Adicional</label>
        <input
          type="text"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.additionalResponsible}
          onChange={(e) => setFormData({...formData, additionalResponsible: e.target.value})}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Telefone do Responsável</label>
        <input
          type="tel"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.additionalResponsiblePhone}
          onChange={(e) => setFormData({...formData, additionalResponsiblePhone: e.target.value})}
        />
      </div>

      <div className="col-span-2">
        <label className="block text-sm font-medium text-gray-700">Endereço</label>
        <input
          type="text"
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.address}
          onChange={(e) => setFormData({...formData, address: e.target.value})}
          required
        />
      </div>

      <div className="col-span-2">
        <label className="block text-sm font-medium text-gray-700">Cuidados Especiais (Alergias, Alimentação e Medicamentos)</label>
        <textarea
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
          value={formData.specialCare}
          onChange={(e) => setFormData({...formData, specialCare: e.target.value})}
          rows={3}
        />
      </div>
    </div>
  );
  
  // Componente de Ocorrências
  const OccurrencesTab = () => {
    const [localOccurrence, setLocalOccurrence] = useState('');
    
    const addOccurrence = () => {
      if (!localOccurrence.trim()) {
        alert('Por favor, descreva a ocorrência.');
        return;
      }
      
      const occurrence = {
        id: Date.now().toString(),
        date: new Date(),
        description: localOccurrence
      };
      
      setFormData({
        ...formData,
        occurrences: [...formData.occurrences, occurrence]
      });
      
      setLocalOccurrence('');
    };
    
    return (
      <div>
        <div className="mb-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Adicionar Nova Ocorrência</h3>
          <div className="flex">
            <textarea
              className="flex-grow rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              placeholder="Descreva a ocorrência..."
              value={localOccurrence}
              onChange={(e) => setLocalOccurrence(e.target.value)}
              rows={3}
            />
            <button
              type="button"
              onClick={addOccurrence}
              className="ml-3 bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 self-end"
            >
              Adicionar
            </button>
          </div>
        </div>
        
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4">Histórico de Ocorrências</h3>
          {formData.occurrences && formData.occurrences.length > 0 ? (
            <div className="bg-white rounded-lg overflow-hidden border border-gray-200">
              <ul className="divide-y divide-gray-200">
                {formData.occurrences.map((occurrence) => (
                  <li key={occurrence.id} className="px-6 py-4">
                    <div className="flex flex-col">
                      <div className="text-sm text-gray-500 mb-1">
                        {formatDateTime(occurrence.date)}
                      </div>
                      <div className="text-md text-gray-900">
                        {occurrence.description}
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500 bg-gray-50 rounded-lg">
              Nenhuma ocorrência registrada.
            </div>
          )}
        </div>
      </div>
    );
  };
  
  // Formulário de Cadastro
  const RegisterForm = () => (
    <form onSubmit={handleSubmit}>
      <FormTabs />
      
      {activeTab === 'info' && <PersonalInfoTab />}
      {activeTab === 'occurrences' && <OccurrencesTab />}

      <div className="mt-6 flex justify-end">
        <button
          type="button"
          className="mr-3 bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          onClick={() => {
            setIsEditing(false);
            setCurrentPage('home');
          }}
        >
          Cancelar
        </button>
        <button
          type="submit"
          className="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          {isEditing ? 'Atualizar' : 'Salvar'}
        </button>
      </div>
    </form>
  );
  
  // Página de cadastro/edição
  const RegisterPage = () => (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex items-center mb-6">
        <button 
          onClick={() => {
            setIsEditing(false);
            setCurrentPage('home');
          }}
          className="mr-4 text-blue-600 hover:text-blue-800 flex items-center"
        >
          <i className="fas fa-arrow-left mr-2"></i>
          <span>Voltar</span>
        </button>
        <h1 className="text-2xl font-bold text-gray-800">
          {isEditing ? 'Editar Dados da Criança' : 'Cadastrar Nova Criança'}
        </h1>
      </div>
      
      <RegisterForm />
    </div>
  );
  
  // Página inicial
  const HomePage = () => (
    <div>
      <header className="text-center mb-8">
        <h1 className="text-3xl font-bold text-blue-800">Ministério Infantil IBJM</h1>
        <p className="text-gray-600 mt-2">Sistema de Gerenciamento de Classes Infantis</p>
      </header>
      
      {/* Grid de Cards das Classes */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <ClassCard 
          title="Berçário I" 
          ageRange="0 à 1 ano" 
          children={checkedInChildren['Berçário I']} 
        />
        <ClassCard 
          title="Berçário II" 
          ageRange="2 à 3 anos" 
          children={checkedInChildren['Berçário II']} 
        />
        <ClassCard 
          title="Crianças" 
          ageRange="4 à 6 anos" 
          children={checkedInChildren['Crianças']} 
        />
      </div>
      
      {/* Botões de Ação */}
      <div className="flex justify-end mb-6">
        <button 
          onClick={navigateToRegister}
          className="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg flex items-center"
        >
          <span className="mr-2">Cadastrar Nova Criança</span>
          <i className="fas fa-plus"></i>
        </button>
      </div>
      
      {/* Barra de Pesquisa */}
      <div className="mb-6">
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <i className="fas fa-search text-gray-400"></i>
          </div>
          <input
            type="text"
            placeholder="Pesquisar criança..."
            className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>
      
      {/* Lista de Crianças */}
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Nome
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Idade
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Classe
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Ações
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredChildren.length > 0 ? (
              filteredChildren.map((child) => {
                const age = calculateAge(child.birthDate);
                const className = getClassByAge(age);
                const isCheckedIn = Object.values(checkedInChildren).some(
                  classChildren => classChildren.some(c => c.id === child.id)
                );
                
                return (
                  <tr key={child.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div 
                        className="text-sm font-medium text-blue-600 cursor-pointer hover:text-blue-800 hover:underline"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleEditChild(child);
                        }}
                      >
                        {child.name}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500">{age} {age === 1 ? 'ano' : 'anos'}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                        {className}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {isVisitor(child) && (
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                          Visitante
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button
                        onClick={() => handleCheckIn(child)}
                        disabled={isCheckedIn}
                        className={`${isCheckedIn ? 'bg-gray-300 cursor-not-allowed' : 'bg-green-500 hover:bg-green-600'} text-white py-1 px-3 rounded-md text-sm`}
                      >
                        {isCheckedIn ? 'Presente' : 'Check-in'}
                      </button>
                    </td>
                  </tr>
                );
              })
            ) : (
              <tr>
                <td colSpan={5} className="px-6 py-4 text-center text-sm text-gray-500">
                  Nenhuma criança encontrada
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
  
  // Página de classe
  const ClassPage = () => {
    if (!selectedClass) return null;
    
    const classChildren = checkedInChildren[selectedClass];
    
    // Estado para armazenar o responsável selecionado para cada criança
    const [selectedResponsibles, setSelectedResponsibles] = useState<Record<string, string>>({});
    
    // Função para atualizar o responsável selecionado
    const handleResponsibleSelect = (childId: string, responsible: string) => {
      setSelectedResponsibles(prev => ({
        ...prev,
        [childId]: responsible
      }));
    };
    
    return (
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex items-center mb-6">
          <button 
            onClick={() => {
              setCurrentPage('home');
              // Limpar os responsáveis selecionados ao sair da página
              setSelectedResponsibles({});
            }}
            className="mr-4 text-blue-600 hover:text-blue-800 flex items-center"
          >
            <i className="fas fa-arrow-left mr-2"></i>
            <span>Voltar</span>
          </button>
          <h1 className="text-2xl font-bold text-gray-800">{selectedClass}</h1>
        </div>
        
        <p className="text-gray-600 mb-6">Faixa etária: {classesInfo[selectedClass].ageRange}</p>
        
        <div className="mb-4">
          <h2 className="text-lg font-semibold text-gray-700 mb-3">Crianças Presentes: {classChildren.length}</h2>
          
          {classChildren.length > 0 ? (
            <div className="bg-white rounded-lg overflow-hidden border border-gray-200">
              <ul className="divide-y divide-gray-200">
                {classChildren.map((child) => {
                  // Lista de responsáveis disponíveis para esta criança
                  const responsibles = [];
                  
                  if (child.fatherName) {
                    responsibles.push({
                      id: 'father',
                      name: child.fatherName,
                      phone: child.fatherPhone
                    });
                  }
                  
                  if (child.motherName) {
                    responsibles.push({
                      id: 'mother',
                      name: child.motherName,
                      phone: child.motherPhone
                    });
                  }
                  
                  if (child.additionalResponsible) {
                    responsibles.push({
                      id: 'additional',
                      name: child.additionalResponsible,
                      phone: child.additionalResponsiblePhone
                    });
                  }
                  
                  // Verificar se há um responsável selecionado para esta criança
                  const hasSelectedResponsible = !!selectedResponsibles[child.id];
                  
                  return (
                    <li key={child.id} className="px-6 py-4">
                      <div className="flex justify-between items-center">
                        <div>
                          <div 
                            className="text-md font-medium text-blue-600 cursor-pointer hover:text-blue-800 hover:underline"
                            onClick={() => handleEditChild(child)}
                          >
                            {child.name}
                          </div>
                          <div className="text-sm text-gray-500 mt-1">
                            {isVisitor(child) ? 'Visitante' : 'Membro'}
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {/* Seleção de responsável para checkout */}
                          <div className="relative w-64">
                            <select
                              className="block w-full pl-3 pr-10 py-1 text-sm border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
                              value={selectedResponsibles[child.id] || ''}
                              onChange={(e) => handleResponsibleSelect(child.id, e.target.value)}
                            >
                              <option value="">Selecione responsável</option>
                              {responsibles.map((responsible) => (
                                <option key={responsible.id} value={responsible.id}>
                                  {responsible.name}
                                </option>
                              ))}
                            </select>
                          </div>
                          <button 
                            className="bg-yellow-500 hover:bg-yellow-600 text-white py-1 px-3 rounded-md text-sm"
                            type="button"
                          >
                            Notificar
                          </button>
                          <button 
                            className={`${hasSelectedResponsible ? 'bg-red-500 hover:bg-red-600' : 'bg-gray-300 cursor-not-allowed'} text-white py-1 px-3 rounded-md text-sm`}
                            onClick={() => {
                              if (hasSelectedResponsible) {
                                handleCheckOut(child, selectedClass);
                                // Limpar o responsável selecionado após o checkout
                                setSelectedResponsibles(prev => {
                                  const newState = {...prev};
                                  delete newState[child.id];
                                  return newState;
                                });
                              }
                            }}
                            disabled={!hasSelectedResponsible}
                            type="button"
                          >
                            Check-out
                          </button>
                        </div>
                      </div>
                    </li>
                  );
                })}
              </ul>
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500 bg-gray-50 rounded-lg">
              Nenhuma criança presente nesta classe.
            </div>
          )}
        </div>
      </div>
    );
  };
  
  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <Head>
        <title>Ministério Infantil IBJM</title>
        <meta name="description" content="Sistema de Gerenciamento de Classes Infantis" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <div className="max-w-6xl mx-auto">
        {currentPage === 'home' && <HomePage />}
        {currentPage === 'class' && <ClassPage />}
        {currentPage === 'register' && <RegisterPage />}
      </div>
    </div>
  );
}